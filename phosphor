#!/usr/bin/env perl
#
# Name       : phosphor
# Author     : Ren√© Uittenbogaard
# Version    : 0.90
# Description: display text like on a phosphorescent CRT terminal
#              By default, the text is converted to uppercase.
#
# Usage      : phosphor [ -d | --delay <delay> ]
#                       [ { -c | --case } { lower | upper | normal | underscore | reverse } ]
#                       [ --demo ] [ <filename> ]
#
#              --delay : delay in seconds between words (default: 0.03)
#              --case  : specify case conversion:
#                          l | lower      : to lowercase
#                          u | upper      : to uppercase (default)
#                          n | normal     : no case conversion
#                          s | underscore : upper -> underscored; lower -> upper
#                          r | reverse    : upper -> reverse; lower -> upper
#              --demo  : use demo text (default: read text from stdin or <filename>)
#

############################################################################
# version info for *roff

=pod

=for roff
.ds Yr 2020-2022
.ds Vw @(#) phosphor 0.90
.de Vp
This manual pertains to \fBphosphor\fP version \\$3.
..

=cut

############################################################################
# prerequisites

use strict;
use warnings;
#use diagnostics;
#use utf8;
use IO::Handle;
use Getopt::Long;
use Time::HiRes qw(sleep);
use Term::ANSIColor;

################################################################################
# declarations

my $NORMAL   = `tput sgr0` || "\e[m";
my $SMUL     = `tput smul` || "\e[4m";
my $RMUL     = `tput rmul` || "\e[24m";
my $BOLD     = `tput bold` || "\e[1m";
my $REVERSE  = `tput rev`  || "\e[7m";
my $BLACK    = "\e[30m";
my $GREEN    = "\e[32m";
my $ON_BLACK = "\e[40m";
my $ON_GREEN = "\e[42m";
my $COLUMNS;

my %CASES = qw(
	l lower
	u upper
	n normal
	s underscore
	r reverse
);

@CASES{values %CASES} = values %CASES;

################################################################################
# functions

sub usage {
	my $error = shift;
	my @usage = <<"	_endUsage_";
Usage:
	phosphor [ -d | --delay <delay> ]
		 [ { -c | --case } { lower | upper | normal | underscore | reverse } ]
		 [ --demo ] [ <filename> ]
	
	-d|--delay : delay in seconds between words (default: 0.03)
	-c|--case  : specify case conversion:
	            l | lower      : to lowercase
	            u | upper      : to uppercase (default)
	            n | normal     : no case conversion
	            s | underscore : upper -> underscored; lower -> upper
	            r | reverse    : upper -> reverse; lower -> upper
	--demo     : use demo text (default: read text from stdin or <filename>)
	
	_endUsage_
	if ($error) {
		warn $error;
		die @usage;
	} else {
		print @usage;
	}
}

sub getopts {
	my $delay = 0.03;
	my $case  = 'upper';
	my $demo;
	GetOptions(
		'delay|d=f'  => \$delay,
		'demo'       => \$demo,
		'case=s'     => \$case,
	) or usage("Error in command line arguments\n");
	if (!$CASES{$case}) {
		usage("Error: Unknown value for 'case': $case\n");
	}
	if ($delay =~ /[^\d.]/) {
		usage("Error: -d requires a real number\n");
	}
	return {
		delay => $delay,
		demo => $demo,
		case => $CASES{$case},
	};
}

sub resizer {
	$COLUMNS = `tput cols`;
	$SIG{WINCH} = *resizer;
}

sub underscorecase {
	my ($text) = @_;
	$text =~ s/(.)/
		$1 eq lc($1) ? uc($1) : "$SMUL$1$RMUL"
	/eg;
	return $text;
}

sub reversecase {
	my ($text) = @_;
	$text =~ s/(.)/
		$1 eq lc($1) ? uc($1) : "$BLACK$ON_GREEN$1$GREEN$ON_BLACK"
	/eg;
	return $text;
}

sub cased {
	my ($type, $text) = @_;
	return $type eq 'upper'
		? uc($text)
		: $type eq 'lower'
		? lc($text)
		: $type eq 'underscore'
		? underscorecase($text)
		: $type eq 'reverse'
		? reversecase($text)
		: $text;
}

sub flash {
	my $case = shift;
	my $old = cased $case, shift;
	my $new = cased $case, shift;
	my $delay = shift;
	print "\r$NORMAL$GREEN$ON_BLACK$old$BOLD$new";
	sleep $delay;
	print "\r$NORMAL$GREEN$ON_BLACK$old$new";
}

sub phosphorize {
	my ($opts) = @_;
	if ($opts->{demo}) {
		*SOURCE = *DATA;
	} else {
		*SOURCE = *ARGV;
	}
	while (<SOURCE>) {
		s/\e\[([0-9]{1,2}(;[0-9]{1,2})*)?[m|K]//g; # remove color escapes
		s/[\r\n]//g; # remove CR and LF
		# print word by word
		my $line = '';
		while (/((.+?)(\s+|$))/g) {
			my ($match, $text, $space) = ($1, $2, $3);
			# if the matched text does not fit on the current line, advance to the next line
			if (length($line) + length($match) > $COLUMNS) {
				$line = '';
				print "\n";
			}
			# if the matched text is longer than one line, just chop it up
			while (length($match) > $COLUMNS) {
				flash $opts->{case}, '', substr($match, 0, $COLUMNS), $opts->{delay};
				print "\n";
				$match = substr($match, $COLUMNS);
			}
			flash $opts->{case}, $line, $match, $opts->{delay};
			$line .= $match;
		}
		print "\n";
	}
	close SOURCE;
}

END {
	print $NORMAL;
}

sub main {
	my $opts = getopts();
	resizer();
	STDOUT->autoflush(1);
	phosphorize($opts);
	STDOUT->autoflush(0);
}

################################################################################
# main

main();

################################################################################
# manual

=pod

=for section 1

=for roff
.de us \" underscore string
\\$1\l'|0\(ul'
..
.hy 0 \" hyphenation off


=head1 NAME

B<phosphor> - display text like on a phosphorescent CRT terminal

=head1 SYNOPSIS

=for roff
.ad l \" align left

C<phosphor [ { -c | --case } >I<style>C< ] [ -d | --delay>I< delay>C< ]>
S<< C<[ --demo ] [ >I<filename>C< [ >I<filename ...>C< ] ]> >>

=for roff
.ad n \" align normal

=head1 DESCRIPTION

B<phosphor> displays text in a word-by-word animation as on a slow CRT terminal.
By default, the text is converted to uppercase.

Text can be read from files or from standard input.

=head1 OPTIONS

=over 4

=item B<-c> I<style>, B<--case> I<style>

Case mapping of letters. I<style> can be one of:

=over 4

=item l | lower

All characters are mapped to lowercase.

=item u | upper

All characters are mapped to uppercase.

=item n | normal

No case conversion is done.

=item r | reverse

Uppercase characters are displayed in inverse; lowercase characters are mapped to uppercase.

=item u | underscore

Uppercase characters are underscored; lowercase characters are mapped to uppercase.
This is the default.

=back

=item B<-d> I<delay>, B<--delay> I<delay>

The delay in (fractional) seconds between words (default: 0.03)

=item B<--demo>

Use a fixed demo text. No other input will be read.

=item I<filename> [ I<filename ...> ]

Files whose content should be displayed. If none are specified, read from standard input.

=back

=head1 SEE ALSO

tput(1), infocmp(1)

=head1 VERSION

=for roff
.PP \" display the 'pertains to'-macro
.Vp \*(Vw

=head1 AUTHOR and COPYRIGHT

=for roff
.\" the \(co macro only exists in groff
.ie \n(.g Copyright \(co \*(Yr, Ren\('e
.el       Copyright (c) \*(Yr, Rene\*'
Uittenbogaard (ruittenb@users.sourceforge.net)

This program is free software; you can redistribute it and/or modify it
under the terms described by the GNU General Public License version 3.

B<phosphor> is distributed without any warranty, even without the
implied warranties of merchantability or fitness for a particular purpose.

=cut

################################################################################
# demo text

__DATA__

There are those who believe that life here began out there, far across the universe.  With tribes of humans who may have been the forefathers of the Egyptians, or the Toltecs, or the Mayans.  That they may have been the architects of the Great Pyramids, or the lost civilizations of Lemuria, or Atlantis.  Some believe that there may yet be brothers of man, who even now fight to survive... somewhere beyond the heavens.

Fleeing from the Cylon tyranny, the last battlestar, Galactica, leads a rag-tag fugitive fleet on a lonely quest: a shining planet, known as Earth.

