#!/usr/bin/env perl
# vim: set ts=4 sw=4 noet nu:
#
# Name       : phosphor
# Author     : Ren√© Uittenbogaard
# Version    : 1.00
# Description: animate text like on a slow phosphorescent CRT terminal
# Usage      : see manual
#

############################################################################
# version info for *roff

=pod

=for roff
.ds Yr 2020-2023
.ds Vw @(#) phosphor 1.00

=cut

############################################################################
# prerequisites

use v5.10;
use strict;
use warnings;
#use diagnostics;
#use utf8;
use POSIX qw(fmin);
use IO::Handle;
use Getopt::Long;
use Time::HiRes qw(sleep);
use Term::Terminfo;
use Term::ANSIColor qw(coloralias colorstrip);

################################################################################
# declarations

my ($RESET, $SMUL, $RMUL, $BOLD, $REVERSE, $CNORM, $CIVIS, $DEFAULT, $ON_DEFAULT);
my $COLUMNS;

my %CASES = qw(
	l lower
	u upper
	n normal
	s underscore
	r reverse
);

@CASES{values %CASES} = values %CASES;

################################################################################
# functions

sub usage {
	my $error = shift;
	#
	# ATTENTION: careful with spaces and tabs below.
	# The "Usage" lines should start with one tab and use spaces after that.
	#
	my @usage = map { s/^\t/  /g; "$_\n" } split /\n/, <<"	_endUsage_";
Usage:
	phosphor [ -br | --blink-rate <delay> ] [ -bt | --blink-times <num> ]
	         [ { -c | --case } { lower | upper | normal | reverse | underscore } ]
	         [ { -co | --color } <color> ] [ -d | --delay <delay> ]
	         [ -o | --off <delay> ] { --demo | <filename> [ <filename ...> ] }
	
	-br|--blink-rate  : cursor blink delay after interpunction, in seconds
	                    (default: 0.1s)
	-bt|--blink-times : number of times to blink the cursor after interpunction
	                    (default: 2)
	-d|--delay        : delay after highlighting a word, in seconds
	                    (default: 0.03s)
	-o|--off          : delay after removing highlight from a word, in seconds
	                    (default: 0.03s)
	--demo            : use demo text
	                    (default: read text from stdin or <filename>)
	
	-c|--case         : specify case conversion:
	                    l | lower      : to lowercase
	                    u | upper      : to uppercase (default)
	                    n | normal     : no case conversion
	                    r | reverse    : upper -> reverse; lower -> upper
	                    s | underscore : upper -> underscored; lower -> upper
	
	-co|--color       : specify text color: any combination of:
	                    black    on_black    blue  on_blue   green  on_green
	                    yellow   on_yellow   red   on_red    white  on_white
	                    magenta  on_magenta  cyan  on_cyan   amber  on_amber
	                    default  on_default
	
	_endUsage_
	if ($error) {
		warn $error;
		die @usage;
	} else {
		print @usage;
	}
}

sub color {
	my ($code) = @_;
	my $result = '';
	foreach (split(/\s+/, $code)) {
		if ($_ eq 'default') {
			$result .= $DEFAULT;
		} elsif ($_ eq 'on_default') {
			$result .= $ON_DEFAULT;
		} else {
			$result .= Term::ANSIColor::color($_);
		}
	}
	return $result;
}

sub colorvalid {
	my ($code) = @_;
	foreach (split(/\s+/, $code)) {
		if (
			$_ ne 'default' and
			$_ ne 'on_default' and
			!Term::ANSIColor::colorvalid($_)
		) {
			return 0;
		}
	}
	return 1;
}

sub getopts {
	my $delay = 0.03;
	my $off   = 0.03;
	my $blink_rate  = 0.1;
	my $blink_times = 2;
	my $case  = 'upper';
	my $color = '';
	my $revcolor;
	my $demo;
	GetOptions(
		'blink-rate|br=f'  => \$blink_rate,
		'blink-times|bt=f' => \$blink_times,
		'case|c=s'         => \$case,
		'color|co=s'       => \$color,
		'off|o=f'          => \$off,
		'delay|d=f'        => \$delay,
		'demo'             => \$demo,
	) or usage("Error in command line arguments\n");

	if (!$CASES{$case}) {
		usage("Error: Unknown value for case: '$case'\n");
	}

	coloralias('amber', 'rgb431');
	coloralias('on_amber', 'on_rgb431');
	if (!colorvalid($color)) {
		usage("Error: Unknown value for color: '$color'\n");
	}
	# Reverse color: turn 'black on_yellow' into 'on_black yellow' etc.
	($revcolor = $color) =~ s{
		\b(on_\B)?((?!bold)\w+\b)
	}{
		$1 // '' eq 'on_' ? $2 : "on_$2"
	}gxie;

	if ($delay =~ /[^\d.]/) {
		usage("Error: -d requires a real number\n");
	}
	return {
		blink_rate  => $blink_rate,
		blink_times => $blink_times,
		delay       => $delay,
		off         => $off,
		demo        => $demo,
		case        => $CASES{$case},
		color       => color($color) // $RESET,
		revcolor    => color($revcolor) // $REVERSE,
	};
}

sub interrupt_handler {
	# Force the application to end through the END block when interrupted
	$SIG{INT} = sub { exit 1; };
}

sub resize_handler {
	$COLUMNS = `tput cols`;
	$SIG{WINCH} = *resize_handler;
}

sub init {
	my $ti = Term::Terminfo->new();

	$RESET      = $ti->getstr('sgr0' ); # || "\e[m";
	$SMUL       = $ti->getstr('smul' ); # || "\e[4m";
	$RMUL       = $ti->getstr('rmul' ); # || "\e[24m";
	$BOLD       = $ti->getstr('bold' ); # || "\e[1m";
	$REVERSE    = $ti->getstr('rev'  ); # || "\e[7m";
	$CNORM      = $ti->getstr('cnorm') || "\e[?12l\e[?25h";
	$CIVIS      = $ti->getstr('civis') || "\e[?25l";
	$DEFAULT    = "\e[39m";
	$ON_DEFAULT = "\e[49m";

	interrupt_handler();
	resize_handler();
}

sub underscorecase {
	my ($text) = @_;
	$text =~ s/(.)/
		$1 eq lc($1) ? uc($1) : "$SMUL$1$RMUL"
	/eg;
	return $text;
}

sub reversecase {
	my ($text, $opts) = @_;
	my ($color, $revcolor) = $opts->@{qw(color revcolor)};
	$text =~ s/(.)/
		$1 eq lc($1) ? uc($1) : "$revcolor$1$color"
	/eg;
	return $text;
}

sub cased {
	my ($text, $opts) = @_;
	my $type = $opts->{case};
	return $type eq 'upper'
		? uc($text)
		: $type eq 'lower'
		? lc($text)
		: $type eq 'underscore'
		? underscorecase($text)
		: $type eq 'reverse'
		? reversecase($text, $opts)
		: $text;
}

sub flash {
	my ($uncased_leader, $uncased_text, $opts) = @_;
	my $leader      = cased $uncased_leader, $opts;
	my $text        = cased $uncased_text, $opts;
	my $blink_times = $opts->{blink_times};

	print "\r$RESET$opts->{color}$leader$BOLD$text";
	sleep $opts->{delay};
	print "\r$RESET$opts->{color}$leader$text";
	sleep $opts->{off};
	my ($punct) = ($text =~ /([.,!?])\s+$/);
	if ($punct) {
		my $blinks = $punct ne ',' ? $blink_times : fmin($blink_times, 1);
		while ($blinks--) {
			sleep $opts->{blink_rate}; print $CIVIS;
			sleep $opts->{blink_rate}; print $CNORM;
		}
	}
}

sub munch {
}

sub phosphorize {
	my ($opts) = @_;
	local *SOURCE = $opts->{demo} ? *DATA : *ARGV;
	while (<SOURCE>) {
		# s/\e\[([0-9]{1,2}(;[0-9]{1,2})*)?[m|K]//g; # remove color escapes
		$_ = colorstrip($_);
		s/[\r\n]//g; # remove CR and LF
		sleep $opts->{delay} * 3 unless length; # delay on empty lines
		# print word by word
		my $line = '';
		while (/((.+?)(\s+|$))/g) {
			my ($match, $_text, $_space) = ($1, $2, $3);
			# if the matched text does not fit on the current screen line, advance to the next screen line
			if (length($line) + length($match) > $COLUMNS) {
				$line = '';
				print "\n";
			}
			# if the matched text is longer than one line, just chop it up
			while (length($match) > $COLUMNS) {
				flash '', substr($match, 0, $COLUMNS), $opts;
				print "\n";
				$match = substr($match, $COLUMNS);
			}
			flash $line, $match, $opts;
			$line .= $match;
		}
		print "\n";
	}
	close SOURCE;
}

sub autoflush (&) {
	my $sub = shift;
	STDOUT->autoflush(1);
	$sub->();
	STDOUT->autoflush(0);
}

sub main {
	init();
	my $opts = getopts();
	autoflush {
		phosphorize($opts);
	};
}

################################################################################
# main

main();

END {
	system "tput cnorm; tput sgr0";
}

################################################################################
# manual

=pod

=for section 6

=for roff
.de us \" underscore string
\\$1\l'|0\(ul'
..
.nh \" no hyphenation


=head1 NAME

B<phosphor> - display text like on a phosphorescent CRT terminal

=head1 SYNOPSIS

=for roff
.ad l \" align left

B<phosphor>
S<< [ { B<-br> | B<--blink-rate> } I<delay> ] >>
S<< [ { B<-bt> | B<--blink-times> } I<num> ] >>
S<< [ { B<-c> | B<--case> } I<style> ] >>
S<< [ { B<-co> | B<--color> } I<colorname> ] >>
S<< [ B<-d> | B<--delay> I<delay> ] >>
S<< [ B<-o> | B<--off> I<delay> ] >>
S<< { B<--demo> | I<filename> [ I<filename> ... ] } >>

=for roff
.ad n \" align normal

=head1 DESCRIPTION

B<phosphor> displays text in a word-by-word animation as on a slow CRT terminal.
Words are flashed extra bright/bold when first displayed.
By default, the text is converted to uppercase.

Text can be read from files or from standard input.

=head1 OPTIONS

=over 4

=item B<-br> I<delay>, B<--blink-rate> I<delay>

The delay in (fractional) seconds between cursor blinks after a comma, full stop, question mark
or exclamation mark (default: 0.1).

=item B<-bt> I<num>, B<--blink-times> I<num>

The number of times the cursor will blink after a full stop, question mark, or exclamation mark.
After a comma, the cursor will blink only once, or not at all if this parameter is zero.

=item B<-c> I<style>, B<--case> I<style>

Case mapping of letters. I<style> can be one of:

=over 4

=item l | lower

All characters are mapped to lowercase.

=item u | upper

All characters are mapped to uppercase.  This is the default.

=item n | normal

No case conversion is done.

=item r | reverse

Uppercase characters are displayed in inverse; lowercase characters are mapped to uppercase.

=item s | underscore

Uppercase characters are underscored; lowercase characters are mapped to uppercase.

=back

=item B<-co> I<colorname>, B<--color> I<colorname>

Select a color for the text and/or background.

For setting a text color, valid names are those listed in Term::ANSIColor(3pm): black, blue,
red, magenta, green, cyan, yellow, white. In addition, the color 'amber' is recognized,
but your terminal needs to support at least 256 colors. The name 'default' can be used for
using the terminal default.

For setting a background color, the names listed above can be prefixed with B<on_>. You may
combine a text and background color with a space: B<--color 'blue on_cyan'>.

The default is no color.  For explicitly not selecting any color, use B<--color ''>.

=item B<-d> I<delay>, B<--delay> I<delay>

The delay in (fractional) seconds after print a word highlighted (default: 0.03)

=item B<--demo>

Use a fixed demo text. No other input will be read.

=item B<-o> I<delay>, B<--off> I<delay>

The delay in (fractional) seconds after removing highlight from a word (default: 0.03)

=item I<filename> [ I<filename ...> ]

Files whose content should be displayed. If none are specified, read from standard input.

=back

=head1 EXAMPLES

=over 4

  ls -l | phosphor -d 0.02

  phosphor -c s -br 0.2 -o 0.05 --color 'green on_black' --demo

  phosphor -c s -br 0.2 --color 'amber on_black' \
           demo/Adamas-Journal-19-Experiment-in-Terra.txt

=back

=head1 NOTES

You may choose to have the terminal driver do case conversion, if your system supports it.

  stty olcuc

Note that MacOS Darwin does not support this setting.

=head1 SEE ALSO

Term::ANSIColor(3pm).

For developers: infocmp(1), stty(1), tput(1), Term::Terminfo(3pm).

=head1 VERSION

=for roff
.de Vp
This manual pertains to \fBphosphor\fP version \\$3.
..
.PP
.Vp \*(Vw

=head1 AUTHOR and COPYRIGHT

=for roff
.\" the \(co macro only exists in groff
.ie \n(.g Copyright \(co \*(Yr, Ren\('e
.el       Copyright (c) \*(Yr, Rene\*'
Uittenbogaard (ruittenb@users.sourceforge.net)

This program is free software; you can redistribute it and/or modify it
under the terms described by the GNU General Public License version 3.

B<phosphor> is distributed without any warranty, even without the
implied warranties of merchantability or fitness for a particular purpose.

=cut

################################################################################
# demo text

__DATA__

There are those who believe that life here began out there, far across the universe.  With tribes of humans who may have been the forefathers of the Egyptians, or the Toltecs, or the Mayans.  That they may have been the architects of the Great Pyramids, or the lost civilizations of Lemuria, or Atlantis.  Some believe that there may yet be brothers of man, who even now fight to survive... somewhere beyond the heavens.

Fleeing from the Cylon tyranny, the last battlestar, Galactica, leads a rag-tag fugitive fleet on a lonely quest: a shining planet, known as Earth.

